import matplotlib.pyplot as plt

from results import *

plt.figure(figsize=(12, 10))
plt.subplot(2, 2, 1)
plt.plot(q_bs32_ds4_ep100[1], label='quantum - 4x4 input size', c='b')
plt.plot(c_bs32_ds4_ep100[1], label='classical - 4x4 input size', c='r')
plt.plot(q_bs32_ds3_ep100[1], label='quantum - 3x3 input size', c='b', linestyle=':')
plt.plot(c_bs32_ds3_ep100[1], label='classical - 3x3 input size', c='r', linestyle=':')
plt.legend()
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.title('Train accuracy')

plt.subplot(2, 2, 2)
plt.plot(q_bs32_ds4_ep100[3], label='quantum - 4x4 input size', c='b')
plt.plot(c_bs32_ds4_ep100[3], label='classical - 4x4 input size', c='r')
plt.plot(q_bs32_ds3_ep100[3], label='quantum - 3x3 input size', c='b', linestyle=':')
plt.plot(c_bs32_ds3_ep100[3], label='classical - 3x3 input size', c='r', linestyle=':')
plt.legend()
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.title('Test accuracy')

plt.subplot(2, 2, 3)
plt.plot(q_bs32_ds4_ep100[0], label='quantum - 4x4 input size', c='b')
plt.plot(c_bs32_ds4_ep100[0], label='classical - 4x4 input size', c='r')
plt.plot(q_bs32_ds3_ep100[0], label='quantum - 3x3 input size', c='b', linestyle=':')
plt.plot(c_bs32_ds3_ep100[0], label='classical - 3x3 input size', c='r', linestyle=':')
plt.legend()
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.title('Train loss')

plt.subplot(2, 2, 4)
plt.plot(q_bs32_ds4_ep100[2], label='quantum - 4x4 input size', c='b')
plt.plot(c_bs32_ds4_ep100[2], label='classical - 4x4 input size', c='r')
plt.plot(q_bs32_ds3_ep100[2], label='quantum - 3x3 input size', c='b', linestyle=':')
plt.plot(c_bs32_ds3_ep100[2], label='classical - 3x3 input size', c='r', linestyle=':')
plt.legend()
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.title('Test loss')
plt.tight_layout()

plt.savefig('results_2kernels.png', dpi=300)

plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
plt.plot(q_bs32_ds4_ep100_k4[0], label='train loss - 4 quantum kernels', c='b')
plt.plot(q_bs32_ds4_ep100[0], label='train loss - 2 quantum kernels', c='r')
plt.plot(q_bs32_ds4_ep100_k4[2], label='test loss - 4 quantum kernels', c='b', linestyle=':')
plt.plot(q_bs32_ds4_ep100[2], label='test loss - 2 quantum kernels', c='r', linestyle=':')
plt.legend()
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.title('Loss')

plt.subplot(1, 2, 2)
plt.plot(q_bs32_ds4_ep100_k4[1], label='train accuracy - 4 quantum kernels', c='b')
plt.plot(q_bs32_ds4_ep100[1], label='train accuracy - 2 quantum kernels', c='r')
plt.plot(q_bs32_ds4_ep100_k4[3], label='test accuracy - 4 quantum kernels', c='b', linestyle=':')
plt.plot(q_bs32_ds4_ep100[3], label='test accuracy - 2 quantum kernels', c='r', linestyle=':')
plt.legend()
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.title('Accuracy')
plt.tight_layout()

plt.savefig('results_4kernels.png', dpi=300)
